/* libmodbus.vapi generated by vapigen, do not modify. */

namespace Modbus {
	[CCode (cheader_filename = "libmodbus.h")]
	[Compact]
	public class modbus_mapping_t {
		public int nb_bits;
		public int nb_input_bits;
		public int nb_input_registers;
		public int nb_registers;
		public uchar tab_bits;
		public uchar tab_input_bits;
		public uint16 tab_input_registers;
		public uint16 tab_registers;
	}
	[CCode (cheader_filename = "libmodbus.h")]
	[Compact]
	public class modbus_t {
	}
	[CCode (cheader_filename = "libmodbus.h", cprefix = "MODBUS_ERROR_RECOVERY_", has_type_id = false)]
	public enum modbus_error_recovery_mode {
		NONE,
		LINK,
		PROTOCOL
	}
	[CCode (cheader_filename = "libmodbus.h")]
	public const int BROADCAST_ADDRESS;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int EMBBADCRC;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int EMBBADDATA;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int EMBBADEXC;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int EMBBADSLAVE;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int EMBMDATA;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int EMBUNKEXC;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int EMBXACK;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int EMBXGPATH;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int EMBXGTAR;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int EMBXILADD;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int EMBXILFUN;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int EMBXILVAL;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int EMBXMEMPAR;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int EMBXNACK;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int EMBXSBUSY;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int EMBXSFAIL;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int ENOBASE;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int FALSE;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int FC_MASK_WRITE_REGISTER;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int FC_READ_COILS;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int FC_READ_DISCRETE_INPUTS;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int FC_READ_EXCEPTION_STATUS;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int FC_READ_HOLDING_REGISTERS;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int FC_READ_INPUT_REGISTERS;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int FC_REPORT_SLAVE_ID;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int FC_WRITE_AND_READ_REGISTERS;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int FC_WRITE_MULTIPLE_COILS;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int FC_WRITE_MULTIPLE_REGISTERS;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int FC_WRITE_SINGLE_COIL;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int FC_WRITE_SINGLE_REGISTER;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int LIBMODBUS_VERSION_HEX;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int LIBMODBUS_VERSION_MAJOR;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int LIBMODBUS_VERSION_MICRO;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int LIBMODBUS_VERSION_MINOR;
	[CCode (cheader_filename = "libmodbus.h")]
	public const string LIBMODBUS_VERSION_STRING;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int MAX_ADU_LENGTH;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int MAX_PDU_LENGTH;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int MAX_READ_BITS;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int MAX_READ_REGISTERS;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int MAX_WRITE_BITS;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int MAX_WRITE_REGISTERS;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int MAX_WR_READ_REGISTERS;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int MAX_WR_WRITE_REGISTERS;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int OFF;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int ON;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int RTU_MAX_ADU_LENGTH;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int RTU_RS232;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int RTU_RS485;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int RTU_RTS_DOWN;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int RTU_RTS_NONE;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int RTU_RTS_UP;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int TCP_DEFAULT_PORT;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int TCP_MAX_ADU_LENGTH;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int TCP_SLAVE;
	[CCode (cheader_filename = "libmodbus.h")]
	public const int TRUE;
	[CCode (cheader_filename = "libmodbus.h")]
	public static void close (Modbus.modbus_t ctx);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int connect (Modbus.modbus_t ctx);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int flush (Modbus.modbus_t ctx);
	[CCode (cheader_filename = "libmodbus.h")]
	public static void free (Modbus.modbus_t ctx);
	[CCode (cheader_filename = "libmodbus.h")]
	public static uchar get_byte_from_bits (uchar src, int idx, uint nb_bits);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int get_byte_timeout (Modbus.modbus_t ctx, uint32 to_sec, uint32 to_usec);
	[CCode (cheader_filename = "libmodbus.h")]
	public static float get_float (uint16 src);
	[CCode (cheader_filename = "libmodbus.h")]
	public static float get_float_dcba (uint16 src);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int get_header_length (Modbus.modbus_t ctx);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int get_response_timeout (Modbus.modbus_t ctx, uint32 to_sec, uint32 to_usec);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int get_socket (Modbus.modbus_t ctx);
	[CCode (cheader_filename = "libmodbus.h")]
	public static void mapping_free (Modbus.modbus_mapping_t mb_mapping);
	[CCode (cheader_filename = "libmodbus.h")]
	public static unowned Modbus.modbus_mapping_t mapping_new (int nb_bits, int nb_input_bits, int nb_registers, int nb_input_registers);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int mask_write_register (Modbus.modbus_t ctx, int addr, uint16 and_mask, uint16 or_mask);
	[CCode (cheader_filename = "libmodbus.h", cname = "modbus_new_rtu")]
	public static unowned Modbus.modbus_t modbus_new_rtu (string device, int baud, GLib.ObjectPath parity, int data_bit, int stop_bit);
	[CCode (cheader_filename = "libmodbus.h", cname = "modbus_new_tcp")]
	public static unowned Modbus.modbus_t modbus_new_tcp (string ip_address, int port);
	[CCode (cheader_filename = "libmodbus.h", cname = "modbus_new_tcp_pi")]
	public static unowned Modbus.modbus_t modbus_new_tcp_pi (string node, string service);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int read_bits (Modbus.modbus_t ctx, int addr, int nb, uchar dest);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int read_input_bits (Modbus.modbus_t ctx, int addr, int nb, uchar dest);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int read_input_registers (Modbus.modbus_t ctx, int addr, int nb, uint16 dest);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int read_registers (Modbus.modbus_t ctx, int addr, int nb, uint16 dest);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int receive (Modbus.modbus_t ctx, uchar req);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int receive_confirmation (Modbus.modbus_t ctx, uchar rsp);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int reply (Modbus.modbus_t ctx, uchar req, int req_length, Modbus.modbus_mapping_t mb_mapping);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int reply_exception (Modbus.modbus_t ctx, uchar req, uint exception_code);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int report_slave_id (Modbus.modbus_t ctx, int max_dest, uchar dest);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int rtu_get_rts (Modbus.modbus_t ctx);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int rtu_get_serial_mode (Modbus.modbus_t ctx);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int rtu_set_rts (Modbus.modbus_t ctx, int mode);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int rtu_set_serial_mode (Modbus.modbus_t ctx, int mode);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int send_raw_request (Modbus.modbus_t ctx, uchar raw_req, int raw_req_length);
	[CCode (cheader_filename = "libmodbus.h")]
	public static void set_bits_from_byte (uchar dest, int idx, uchar value);
	[CCode (cheader_filename = "libmodbus.h")]
	public static void set_bits_from_bytes (uchar dest, int idx, uint nb_bits, uchar tab_byte);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int set_byte_timeout (Modbus.modbus_t ctx, uint32 to_sec, uint32 to_usec);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int set_debug (Modbus.modbus_t ctx, int flag);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int set_error_recovery (Modbus.modbus_t ctx, Modbus.modbus_error_recovery_mode error_recovery);
	[CCode (cheader_filename = "libmodbus.h")]
	public static void set_float (float f, uint16 dest);
	[CCode (cheader_filename = "libmodbus.h")]
	public static void set_float_dcba (float f, uint16 dest);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int set_response_timeout (Modbus.modbus_t ctx, uint32 to_sec, uint32 to_usec);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int set_slave (Modbus.modbus_t ctx, int slave);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int set_socket (Modbus.modbus_t ctx, int s);
	[CCode (cheader_filename = "libmodbus.h")]
	public static unowned string strerror (int errnum);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int tcp_accept (Modbus.modbus_t ctx, int s);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int tcp_listen (Modbus.modbus_t ctx, int nb_connection);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int tcp_pi_accept (Modbus.modbus_t ctx, int s);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int tcp_pi_listen (Modbus.modbus_t ctx, int nb_connection);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int write_and_read_registers (Modbus.modbus_t ctx, int write_addr, int write_nb, uint16 src, int read_addr, int read_nb, uint16 dest);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int write_bit (Modbus.modbus_t ctx, int coil_addr, int status);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int write_bits (Modbus.modbus_t ctx, int addr, int nb, uchar data);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int write_register (Modbus.modbus_t ctx, int reg_addr, int value);
	[CCode (cheader_filename = "libmodbus.h")]
	public static int write_registers (Modbus.modbus_t ctx, int addr, int nb, uint16 data);
}
